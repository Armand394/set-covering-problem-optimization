## ams_version=1.0

Model Main_Set_covering {
	Set Duties {
		SubsetOf: Integers;
		Index: j;
		Definition: data{1..19923};
	}
	Set Trips {
		SubsetOf: Integers;
		Index: i;
		Definition: data{1..182};
	}
	Parameter costs {
		IndexDomain: j;
	}
	Parameter a {
		IndexDomain: (i,j);
	}
	Variable x {
		IndexDomain: j;
		Range: binary;
	}
	Variable totalCost {
		Range: free;
		Definition: sum[j, costs(j)*x(j)];
	}
	Constraint Const {
		IndexDomain: i;
		Definition: sum[j,a(i,j)*x(j)] = 1;
	}
	MathematicalProgram Min {
		Objective: totalCost;
		Direction: minimize;
		Constraints: AllConstraints;
		Variables: AllVariables;
		Type: Automatic;
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			solve min;
				if (min.ProgramStatus <> 'Optimal') then
					empty x, totalCost;
				 endif;
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
